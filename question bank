HTML - 

1. Are the HTML tags and elements the same thing?

<h1>Heading 1</h1> is a HTML element but just <h1> is a starting tag and </h1> is 
a closing tag

-----------------

2. What are HTML Entities?

In HTML some characters are reserved like ‘<’, ‘>’, ‘/’, etc.

-------------------

3. What are different types of lists in HTML?

ul , ol definition and description list

-------------------

4. What is the ‘class’ attribute in HTML?

------------

5. What is the difference between the ‘id’ attribute and the ‘class’ 
attribute of HTML elements?

---------------

6. Describe HTML layout structure.

<header>: Stores the starting information about the web page.
<footer>: Represents the last section of the page.
<nav>: The navigation menu of the HTML page.
<article>: It is a set of information.
<section>: It is used inside the article block to define the basic structure of a page.
<aside>: Sidebar content of the page.


----------------

7. Can we display a web page inside a web page or Is nesting of webpages possible?

<iframe src=”url of the web page to embed” />

-------------

8. What is the difference between “display: none” and “visibility: hidden”, 
when used as attributes to the HTML element.


----------------

9. Difference between link tag <link> and anchor tag <a>

The anchor tag <a> is used to create a hyperlink to another webpage or to 
a certain part of the webpage and these links are clickable, whereas, link tag 
<link> defines a link between a document and an external resource and these are 
not clickable.

----------------------

10. How can we include audio or video in a webpage?

<audio> <video>

----------------------

11. Explain the concept of web storage in HTML5.

Local Storage - This helps in storing data that will be retained even though the user 
reopens the browser. It is stored for each webapp on different browsers.

Session Storage - This is used for one session only. After the user closes the browser 
this gets deleted.

------------------------

12. Explain new input types provided by HTML5 for forms?

Date - Only select date by using type = "date"
Week - Pick a week by using type = "week"
Month - Only select month by using type = "month"
Time - Only select time by using type = "time".
Datetime - Combination of date and time by using type = "datetime"
Datetime-local - Combination of  date and time by using type = "datetime-local." but ignoring the timezone
Color - Accepts multiple colors using type = "color"
Email - Accepts one or more email addresses using type = "email"
Number - Accepts a numerical value with additional checks like min and max using type = "number"
Search - Allows searching queries by inputting text using type = "search"
Tel - Allows different phone numbers by using type = "tel"
Placeholder - To display a short hint in the input fields before entering a value using type = "placeholder"
Range - Accepts a numerical value within a specific range using type = "range"
Url - Accepts a web address using type = "url”

---------------------------------------------------------------------

----------------------------------------------------------------------

CSS - 

1.What is the Box model in CSS? Which CSS properties are a part of it?

Content:  Actual Content of the box where the text or image placed.
Padding: Area surrounding the content (Space between the border and content).
Border: Area surrounding the padding.
Margin: Area surrounding the border
-------------------------

2. What are the different types of Selectors in CSS?

a. Universal Selector - *
b. Element Type Selector 
c. ID Selector
d. Class Selector
e. Descendant Combinator - 
#container .box {
	float: left;
	padding-bottom: 15px;
} 

<div id="container">
	<div class="box"></div>
	
	<div class="box-2"></div>
</div>

<div class=”box”></div>

f. Child Combinator- 

#container> .box {
	float: left;
	padding-bottom: 15px;
}

<div id="container">
	<div class="box"></div>
	
	<div>
		<div class="box"></div>
	</div>
</div>

g. General Sibling Combinator- 

h2 ~ p {
	margin-bottom: 20px;
}

<h2>Title</h2>
<p>Paragraph example.</p>
<p>Paragraph example.</p>
<p>Paragraph example.</p>
<div class=”box”>
	<p>Paragraph example.</p>
</div>

h. Adjacent Sibling Combinator

p + p {
	text-indent: 1.Sem;
	margin-bottom: 0;
}
i. Attribute Selector- 

input [type=”text”] {
	background-color: #444;
	width: 200px;
}

---------------------
3. What is VH/VW (viewport height/ viewport width) in CSS?

It’s a CSS unit used to measure the height and width in percentage with 
respect to the viewport. It is used mainly in responsive design techniques. 
The measure VH is equal to 1/100 of the height of the viewport. If the height 
of the browser is 1000px, 1vh is equal to 10px. Similarly, if the width is 1000px, 
then 1 vw is equal to 10px.

-------------------------

4. What is the difference between inline, inline-block, and block?

-------------------------

5. What is a Pseudo element? What is pseudo-class?

Pseudo-classes select regular elements but under certain conditions like when 
the user is hovering over the link.

:link
:visited
:hover
:active
:focus

A pseudo-element however allows us to create items that do not normally exist 
in the document tree, for example ::after.

::before
::after
::first-letter
::first-line
::selection

---------------------------

6. Explain CSS position property?

Absolute - absolute position is actually set relative to the element's parent. 
if no parent is available then the relative place to the page itself

Relative - It allows the use of z-index on the element and it limits the scope 
of absolutely positioned child elements. Any child element will be absolutely 
positioned within that block.

Fixed - The element is positioned relative to the viewport or the browser window 
itself. viewport doesn't change if you scroll and hence the fixed element will stay 
right in the same position. 

Static - Static default for every single page element. The only reason you would 
ever set an element to position: static is to forcefully-remove some positioning 
that got applied to an element outside of your control.

Sticky - Sticky positioning is a hybrid of relative and fixed positioning. The 
element is treated as relative positioned until it crosses a specified threshold, 
at which point it is treated as fixed positioned.

-----------------

7. Different Box Sizing Property?

Content-box: The default width and height values apply to the element's 
content only. The padding and border are added to the outside of the box.

Padding-box: Width and height values apply to the element's content and its 
padding. The border is added to the outside of the box. Currently, only Firefox 
supports the padding-box value.

Border-box: Width and height values apply to the content, padding, and border

--------------------------------

8. Centering with transform

<div class="cn"><div class="inner">your content</div></div>

.cn {
	position: relative;
	width: 500px;
	height: 500px;
}

.inner {
	position: absolute;
	top: 50%; left: 50%;
	transform: translate(-50%,-50%);
	width: 200px;
	height: 200px;
}

--------------------------------

9. centering with grid 

.wrap-grid {
	display: grid;
	place-content: center;
}
-------------------

10. What is specificity? How to calculate specificity?

------------------------

11. What are the advantages of using translate() instead of absolute position?

Translate() does not cause the browser to trigger repaint and layout and instead 
only acts on the compositor. The absolute position triggers the repaint or DOM reflow.
So, translate() gives the better performance

---------------------------------

12. Difference between CSS grid vs flexbox?

CSS Grid Layout is a two-dimensional system, meaning it can handle both columns 
and rows. Grid layout is intended for larger-scale layouts which aren’t linear in 
design.

Flexbox is largely a one-dimensional system (either in a column or a row). 
Flexbox layout is most appropriate to the components of an application.

-----------------------

13. What does * { box-sizing: border-box; } do? What are its advantages?

The height of an element is now calculated by the content's height + vertical 
padding + vertical border width.

The width of an element is now calculated by the content's width + horizontal 
padding + horizontal border width.

----------------------------------------------------------
